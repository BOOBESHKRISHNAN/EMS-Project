{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class RoleGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route) {\n    if (!this.authService.isAuthenticated()) {\n      this.router.navigate(['/login']);\n      return false;\n    }\n    const requiredRoles = route.data['roles'];\n    if (!requiredRoles || requiredRoles.length === 0) {\n      return true;\n    }\n    if (this.authService.hasAnyRole(requiredRoles)) {\n      return true;\n    }\n    this.router.navigate(['/unauthorized']);\n    return false;\n  }\n  static {\n    this.ɵfac = function RoleGuard_Factory(t) {\n      return new (t || RoleGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RoleGuard,\n      factory: RoleGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["RoleGuard","constructor","authService","router","canActivate","route","isAuthenticated","navigate","requiredRoles","data","length","hasAnyRole","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["/workspace/src/app/guards/role.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { UserRole } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    if (!this.authService.isAuthenticated()) {\n      this.router.navigate(['/login']);\n      return false;\n    }\n\n    const requiredRoles = route.data['roles'] as UserRole[];\n    if (!requiredRoles || requiredRoles.length === 0) {\n      return true;\n    }\n\n    if (this.authService.hasAnyRole(requiredRoles)) {\n      return true;\n    }\n\n    this.router.navigate(['/unauthorized']);\n    return false;\n  }\n}"],"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EACpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CAACC,KAA6B;IACvC,IAAI,CAAC,IAAI,CAACH,WAAW,CAACI,eAAe,EAAE,EAAE;MACvC,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;IAGd,MAAMC,aAAa,GAAGH,KAAK,CAACI,IAAI,CAAC,OAAO,CAAe;IACvD,IAAI,CAACD,aAAa,IAAIA,aAAa,CAACE,MAAM,KAAK,CAAC,EAAE;MAChD,OAAO,IAAI;;IAGb,IAAI,IAAI,CAACR,WAAW,CAACS,UAAU,CAACH,aAAa,CAAC,EAAE;MAC9C,OAAO,IAAI;;IAGb,IAAI,CAACL,MAAM,CAACI,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;IACvC,OAAO,KAAK;EACd;;;uBAvBWP,SAAS,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATjB,SAAS;MAAAkB,OAAA,EAATlB,SAAS,CAAAmB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
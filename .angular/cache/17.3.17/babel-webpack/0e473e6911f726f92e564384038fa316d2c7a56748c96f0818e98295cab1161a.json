{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { UserRole } from '../../models/user.model';\nlet UnauthorizedComponent = class UnauthorizedComponent {\n  constructor(authService, router, route) {\n    this.authService = authService;\n    this.router = router;\n    this.route = route;\n    this.currentUser = null;\n    this.attemptedRoute = null;\n    this.requiredRoles = [];\n    // Role enum for template access\n    this.UserRole = UserRole;\n  }\n  ngOnInit() {\n    this.loadUserData();\n    this.getRouteInfo();\n  }\n  loadUserData() {\n    this.authService.currentUser$.subscribe(user => {\n      this.currentUser = user;\n    });\n  }\n  getRouteInfo() {\n    // Get the attempted route from query parameters\n    this.route.queryParams.subscribe(params => {\n      this.attemptedRoute = params['returnUrl'] || null;\n      // Parse required roles if provided\n      if (params['requiredRoles']) {\n        try {\n          this.requiredRoles = JSON.parse(params['requiredRoles']);\n        } catch (error) {\n          console.error('Error parsing required roles:', error);\n        }\n      }\n    });\n  }\n  goToDashboard() {\n    this.router.navigate(['/dashboard']);\n  }\n  goToLogin() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n  goBack() {\n    window.history.back();\n  }\n  goToHome() {\n    this.router.navigate(['/']);\n  }\n  // Helper methods for template\n  getUserRoleDisplayName(role) {\n    switch (role) {\n      case UserRole.SuperAdmin:\n        return 'Super Administrator';\n      case UserRole.Admin:\n        return 'Administrator';\n      case UserRole.Organizer:\n        return 'Event Organizer';\n      case UserRole.RegisteredUser:\n        return 'Registered User';\n      default:\n        return 'User';\n    }\n  }\n  getCurrentUserRoleDisplay() {\n    if (!this.currentUser) return 'Guest';\n    return this.getUserRoleDisplayName(this.currentUser.role);\n  }\n  getRequiredRolesDisplay() {\n    if (this.requiredRoles.length === 0) return 'Special permissions';\n    const roleNames = this.requiredRoles.map(role => this.getUserRoleDisplayName(role));\n    if (roleNames.length === 1) {\n      return roleNames[0];\n    } else if (roleNames.length === 2) {\n      return roleNames.join(' or ');\n    } else {\n      const lastRole = roleNames.pop();\n      return roleNames.join(', ') + ', or ' + lastRole;\n    }\n  }\n  getRouteDisplayName() {\n    if (!this.attemptedRoute) return 'the requested page';\n    const routeNames = {\n      '/dashboard': 'Dashboard',\n      '/events': 'Events',\n      '/events/create': 'Create Event',\n      '/locations': 'Location Management',\n      '/my-tickets': 'My Tickets',\n      '/admin': 'Admin Panel'\n    };\n    // Check for dynamic routes\n    if (this.attemptedRoute.includes('/events/') && this.attemptedRoute.includes('/edit')) {\n      return 'Edit Event';\n    }\n    if (this.attemptedRoute.includes('/events/') && this.attemptedRoute.includes('/book')) {\n      return 'Book Ticket';\n    }\n    if (this.attemptedRoute.includes('/events/') && !this.attemptedRoute.includes('/create')) {\n      return 'Event Details';\n    }\n    return routeNames[this.attemptedRoute] || 'the requested page';\n  }\n  canAccessDashboard() {\n    return this.authService.isAuthenticated();\n  }\n  getErrorMessage() {\n    if (!this.currentUser) {\n      return 'You need to be logged in to access this page.';\n    }\n    if (this.requiredRoles.length > 0) {\n      return `You need ${this.getRequiredRolesDisplay()} permissions to access ${this.getRouteDisplayName()}.`;\n    }\n    return 'You do not have permission to access this page.';\n  }\n  getErrorIcon() {\n    if (!this.currentUser) {\n      return 'fas fa-sign-in-alt';\n    }\n    return 'fas fa-shield-alt';\n  }\n  getSuggestionMessage() {\n    if (!this.currentUser) {\n      return 'Please log in with an account that has the necessary permissions.';\n    }\n    return `Your current role is ${this.getCurrentUserRoleDisplay()}. Contact your administrator if you believe you should have access to this resource.`;\n  }\n};\nUnauthorizedComponent = __decorate([Component({\n  selector: 'app-unauthorized',\n  templateUrl: './unauthorized.component.html',\n  styleUrls: ['./unauthorized.component.css']\n})], UnauthorizedComponent);\nexport { UnauthorizedComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
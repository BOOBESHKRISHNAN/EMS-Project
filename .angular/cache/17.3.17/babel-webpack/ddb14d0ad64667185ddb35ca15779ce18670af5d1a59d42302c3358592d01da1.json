{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { UserRole } from '../../models/user.model';\nlet DashboardComponent = class DashboardComponent {\n  constructor(authService, eventService, ticketService, locationService, router) {\n    this.authService = authService;\n    this.eventService = eventService;\n    this.ticketService = ticketService;\n    this.locationService = locationService;\n    this.router = router;\n    this.currentUser = null;\n    this.events = [];\n    this.myTickets = [];\n    this.locations = [];\n    this.loading = true;\n    this.error = null;\n    // Role enum for template access\n    this.UserRole = UserRole;\n  }\n  ngOnInit() {\n    this.loadUserData();\n    this.loadDashboardData();\n  }\n  loadUserData() {\n    this.authService.currentUser$.subscribe(user => {\n      this.currentUser = user;\n    });\n  }\n  loadDashboardData() {\n    this.loading = true;\n    this.error = null;\n    // Load events for all users\n    this.eventService.getEvents().subscribe({\n      next: events => {\n        this.events = events.slice(0, 5); // Show only latest 5 events\n      },\n      error: error => {\n        console.error('Error loading events:', error);\n        this.error = 'Failed to load events';\n      }\n    });\n    // Load user-specific data based on role\n    if (this.currentUser) {\n      switch (this.currentUser.role) {\n        case UserRole.RegisteredUser:\n          this.loadUserTickets();\n          break;\n        case UserRole.SuperAdmin:\n          this.loadLocations();\n          break;\n        case UserRole.Admin:\n        case UserRole.Organizer:\n          // Additional data for admins and organizers if needed\n          break;\n      }\n    }\n    this.loading = false;\n  }\n  loadUserTickets() {\n    this.ticketService.getMyTickets().subscribe({\n      next: tickets => {\n        this.myTickets = tickets.slice(0, 5); // Show only latest 5 tickets\n      },\n      error: error => {\n        console.error('Error loading tickets:', error);\n      }\n    });\n  }\n  loadLocations() {\n    this.locationService.getLocations().subscribe({\n      next: locations => {\n        this.locations = locations.slice(0, 5); // Show only 5 locations\n      },\n      error: error => {\n        console.error('Error loading locations:', error);\n      }\n    });\n  }\n  // Navigation methods\n  navigateToEvents() {\n    this.router.navigate(['/events']);\n  }\n  navigateToMyTickets() {\n    this.router.navigate(['/my-tickets']);\n  }\n  navigateToLocations() {\n    this.router.navigate(['/locations']);\n  }\n  navigateToCreateEvent() {\n    this.router.navigate(['/events/create']);\n  }\n  viewEventDetails(eventId) {\n    this.router.navigate(['/events', eventId]);\n  }\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n  // Helper methods for template\n  canCreateEvents() {\n    return this.authService.hasAnyRole([UserRole.Organizer, UserRole.Admin, UserRole.SuperAdmin]);\n  }\n  canManageLocations() {\n    return this.authService.hasRole(UserRole.SuperAdmin);\n  }\n  canViewTickets() {\n    return this.authService.hasRole(UserRole.RegisteredUser);\n  }\n  formatDate(dateString) {\n    return new Date(dateString).toLocaleDateString();\n  }\n  getWelcomeMessage() {\n    if (!this.currentUser) return 'Welcome to Event Management';\n    const firstName = this.currentUser.firstName || 'User';\n    const roleDisplay = this.getRoleDisplayName(this.currentUser.role);\n    return `Welcome back, ${firstName}! (${roleDisplay})`;\n  }\n  getRoleDisplayName(role) {\n    switch (role) {\n      case UserRole.SuperAdmin:\n        return 'Super Admin';\n      case UserRole.Admin:\n        return 'Admin';\n      case UserRole.Organizer:\n        return 'Organizer';\n      case UserRole.RegisteredUser:\n        return 'User';\n      default:\n        return 'User';\n    }\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
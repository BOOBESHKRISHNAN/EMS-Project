{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'https://localhost:7297/api/User'; // Update with your backend URL\n      this.tokenKey = 'auth_token';\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.loadUserFromToken();\n    }\n    login(credentials) {\n      return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n        this.setToken(response.token);\n        this.loadUserFromToken();\n      }));\n    }\n    registerUser(userData) {\n      return this.http.post(`${this.apiUrl}/register-User`, userData);\n    }\n    registerAdmin(userData) {\n      return this.http.post(`${this.apiUrl}/register-Admin-by-SuperAdmin`, userData);\n    }\n    registerOrganizer(userData) {\n      return this.http.post(`${this.apiUrl}/register-Organizer-by-SuperAdmin`, userData);\n    }\n    logout() {\n      localStorage.removeItem(this.tokenKey);\n      this.currentUserSubject.next(null);\n    }\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    isAuthenticated() {\n      const token = this.getToken();\n      if (!token) return false;\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        return payload.exp > Date.now() / 1000;\n      } catch {\n        return false;\n      }\n    }\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    hasRole(role) {\n      const user = this.getCurrentUser();\n      return user?.role === role;\n    }\n    hasAnyRole(roles) {\n      const user = this.getCurrentUser();\n      return user ? roles.includes(user.role) : false;\n    }\n    setToken(token) {\n      localStorage.setItem(this.tokenKey, token);\n    }\n    loadUserFromToken() {\n      const token = this.getToken();\n      if (!token || !this.isAuthenticated()) {\n        this.currentUserSubject.next(null);\n        return;\n      }\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        const user = {\n          id: parseInt(payload.user_id || payload.nameid),\n          email: payload.email,\n          firstName: payload.given_name,\n          lastName: payload.family_name,\n          role: payload.role,\n          createdAt: new Date()\n        };\n        this.currentUserSubject.next(user);\n      } catch (error) {\n        console.error('Error parsing token:', error);\n        this.logout();\n      }\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
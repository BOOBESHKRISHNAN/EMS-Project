{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7297/api/User'; // Update with your backend URL\n    this.tokenKey = 'auth_token';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.loadUserFromToken();\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      this.setToken(response.token);\n      this.loadUserFromToken();\n    }));\n  }\n  registerUser(userData) {\n    return this.http.post(`${this.apiUrl}/register-User`, userData);\n  }\n  registerAdmin(userData) {\n    return this.http.post(`${this.apiUrl}/register-Admin-by-SuperAdmin`, userData);\n  }\n  registerOrganizer(userData) {\n    return this.http.post(`${this.apiUrl}/register-Organizer-by-SuperAdmin`, userData);\n  }\n  logout() {\n    localStorage.removeItem(this.tokenKey);\n    this.currentUserSubject.next(null);\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    if (!token) return false;\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp > Date.now() / 1000;\n    } catch {\n      return false;\n    }\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  hasRole(role) {\n    const user = this.getCurrentUser();\n    return user?.role === role;\n  }\n  hasAnyRole(roles) {\n    const user = this.getCurrentUser();\n    return user ? roles.includes(user.role) : false;\n  }\n  setToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  loadUserFromToken() {\n    const token = this.getToken();\n    if (!token || !this.isAuthenticated()) {\n      this.currentUserSubject.next(null);\n      return;\n    }\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const user = {\n        id: parseInt(payload.user_id || payload.nameid),\n        email: payload.email,\n        firstName: payload.given_name,\n        lastName: payload.family_name,\n        role: payload.role,\n        createdAt: new Date()\n      };\n      this.currentUserSubject.next(user);\n    } catch (error) {\n      console.error('Error parsing token:', error);\n      this.logout();\n    }\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","apiUrl","tokenKey","currentUserSubject","currentUser$","asObservable","loadUserFromToken","login","credentials","post","pipe","response","setToken","token","registerUser","userData","registerAdmin","registerOrganizer","logout","localStorage","removeItem","next","getToken","getItem","isAuthenticated","payload","JSON","parse","atob","split","exp","Date","now","getCurrentUser","value","hasRole","role","user","hasAnyRole","roles","includes","setItem","id","parseInt","user_id","nameid","email","firstName","given_name","lastName","family_name","createdAt","error","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/workspace/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { \n  LoginRequest, \n  LoginResponse, \n  RegisterUserRequest, \n  RegisterAdminRequest, \n  RegisterOrganizerRequest, \n  User, \n  UserRole \n} from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'https://localhost:7297/api/User'; // Update with your backend URL\n  private tokenKey = 'auth_token';\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.loadUserFromToken();\n  }\n\n  login(credentials: LoginRequest): Observable<LoginResponse> {\n    return this.http.post<LoginResponse>(`${this.apiUrl}/login`, credentials)\n      .pipe(\n        tap(response => {\n          this.setToken(response.token);\n          this.loadUserFromToken();\n        })\n      );\n  }\n\n  registerUser(userData: RegisterUserRequest): Observable<any> {\n    return this.http.post(`${this.apiUrl}/register-User`, userData);\n  }\n\n  registerAdmin(userData: RegisterAdminRequest): Observable<any> {\n    return this.http.post(`${this.apiUrl}/register-Admin-by-SuperAdmin`, userData);\n  }\n\n  registerOrganizer(userData: RegisterOrganizerRequest): Observable<any> {\n    return this.http.post(`${this.apiUrl}/register-Organizer-by-SuperAdmin`, userData);\n  }\n\n  logout(): void {\n    localStorage.removeItem(this.tokenKey);\n    this.currentUserSubject.next(null);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n    if (!token) return false;\n    \n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp > Date.now() / 1000;\n    } catch {\n      return false;\n    }\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  hasRole(role: UserRole): boolean {\n    const user = this.getCurrentUser();\n    return user?.role === role;\n  }\n\n  hasAnyRole(roles: UserRole[]): boolean {\n    const user = this.getCurrentUser();\n    return user ? roles.includes(user.role) : false;\n  }\n\n  private setToken(token: string): void {\n    localStorage.setItem(this.tokenKey, token);\n  }\n\n  private loadUserFromToken(): void {\n    const token = this.getToken();\n    if (!token || !this.isAuthenticated()) {\n      this.currentUserSubject.next(null);\n      return;\n    }\n\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const user: User = {\n        id: parseInt(payload.user_id || payload.nameid),\n        email: payload.email,\n        firstName: payload.given_name,\n        lastName: payload.family_name,\n        role: payload.role as UserRole,\n        createdAt: new Date()\n      };\n      this.currentUserSubject.next(user);\n    } catch (error) {\n      console.error('Error parsing token:', error);\n      this.logout();\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}